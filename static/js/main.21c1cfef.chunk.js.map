{"version":3,"sources":["utils/parse.js","components/atoms/paperBadge.jsx","components/molecules/card.jsx","components/molecules/form.jsx","components/templates/paper.jsx","index.js"],"names":["parseTSV","response","records","split","recordsArray","map","r","columns","slice","paper","dict","i","length","trim","toJSON","record","replace","PaperBadge","_ref","text","badgeClass","react_default","a","createElement","className","createKey","paper_json","raw_authors","first_author","Card","idx","key","date","href","link","title","bibtex_item","startsWith","journal_name","ret","__html","reactjs_popup_es","trigger","class","modal","dangerouslySetInnerHTML","createPopup","paperBadge","conference","year","note","Form","val","this","refs","myinput","value","props","onFilterVal","type","ref","placeholder","onKeyUp","filterVal","bind","Component","Paper","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleFilterTextVal","assertThisInitialized","state","data","filt","_this2","fetch","then","setState","query","toLowerCase","filter","match","form_Form","card","ReactDOM","render","paper_Paper","document","getElementById"],"mappings":"+OAsBeA,EAPE,SAAAC,GACb,IAAIC,EAAUD,EAASE,MAAM,MAG7B,OAnBW,SAAAD,GACX,IACME,EAAeF,EAAQG,IADd,SAAAC,GAAC,OAAIA,EAAEH,MAAM,QAEtBI,EAAUH,EAAa,GAS7B,OAReA,EAAaI,MAAM,GACRH,IAAI,SAAAI,GAE1B,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAAIJ,EAAQK,OAAQD,IAChCD,EAAKH,EAAQI,GAAGE,QAAUJ,EAAME,IAAM,GAE1C,OAAOD,IAQQI,CADnBZ,EAAUA,EAAQG,IAAI,SAAAU,GAAM,OAAIA,EAAOC,QAAQ,MAAO,QCJ3CC,EANI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAMC,EAATF,EAASE,WAAT,OACfC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,UAAWJ,GAAaD,YCAtC,SAASM,EAAUC,GACf,IAAIC,EAAcD,EAAU,QAAYvB,MAAM,KAC9C,GAAIwB,EAAYf,OAAS,EAAG,CACxB,IAAIgB,EAAeD,EAAY,GAG/B,OADAC,GADAA,EAAeA,EAAazB,MAAM,MACNK,OAAO,GAAG,IAChBkB,EAAU,MAqCxC,IAuBeG,EAvBF,SAAAX,GAAA,IAAGT,EAAHS,EAAGT,MAAOqB,EAAVZ,EAAUY,IAAV,OACTT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAAwBO,IAAKD,GACxCT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAAf,UAAgDf,EAAMuB,MACtDX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACVH,EAAAC,EAAAC,cAAA,KAAGU,KAAMxB,EAAMyB,MAAOzB,EAAM0B,QAEhCd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAxC3B,SAAqBE,GACjB,IAAIU,EAAc,GAElB,GAAIV,EAAU,WAAeW,WAAW,MAAO,CAC3C,IAAIC,EAAeZ,EAAU,WAAelB,MAAM,GAClD4B,GAAe,YAAcX,EAAUC,GAAc,QACrDU,GAAe,wBAA0BE,EAAe,cAExDb,EAAUC,GACVU,GAAe,kBAAoBX,EAAUC,GAAc,QAC3DU,GACI,yCACAV,EAAU,WACV,SAIRU,GAAe,uBADDV,EAAU,QAAYV,QAAQ,MAAO,SACD,SAClDoB,GAAe,sBAAwBV,EAAU,MAAY,SAG7D,IAAIa,EAAM,CAAEC,OAFZJ,GAAe,KAIf,OACIf,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CACIC,QAASrB,EAAAC,EAAAC,cAAA,UAAQoB,MAAM,gBAAd,mBACTC,OAAK,GAELvB,EAAAC,EAAAC,cAAA,OAAKsB,wBAAyBN,KAazBO,CAAYrC,GACbY,EAAAC,EAAAC,cAACwB,EAAD,CACI5B,KAAMV,EAAMuC,WACZ5B,WAAW,qBAEfC,EAAAC,EAAAC,cAACwB,EAAD,CACI5B,KAAMV,EAAMwC,KACZ7B,WAAW,yBAGnBC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAaf,EAAMyC,SCpEvBC,sLAEb,IAAMC,EAAMC,KAAKC,KAAKC,QAAQC,MAC9BH,KAAKI,MAAMC,YAAYN,oCAIvB,OACI/B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,SACIoC,KAAK,OACLC,IAAI,UACJpC,UAAU,eACVqC,YAAY,2BACZC,QAAST,KAAKU,UAAUC,KAAKX,iBAfnBY,aCQbC,cACjB,SAAAA,EAAYT,GAAO,IAAAU,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAf,KAAAa,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAf,KAAAe,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAnB,KAAMI,KACDgB,oBAAsBN,EAAKM,oBAAoBT,KAAzBI,OAAAM,EAAA,EAAAN,QAAAM,EAAA,EAAAN,CAAAD,KAC3BA,EAAKQ,MAAQ,CACTC,KAAM,KACNC,KAAM,MALKV,mFASC,IAAAW,EAAAzB,KAChB0B,MAfJ,oKAgBSC,KAAK,SAAA/E,GAAQ,OAAIA,EAASkB,SAC1B6D,KAAK,SAAAJ,GAAI,OAAI5E,EAAS4E,KACtBI,KAAK,SAAAH,GAAI,OACNC,EAAKG,SAAS,CACVL,KAAMC,EACNA,uDAKIK,GAChBA,EAAQA,EAAMC,cACd,IAAMN,EAAOxB,KAAKsB,MAAMC,KAAKQ,OACzB,SAAA3E,GAAK,OACDA,EAAM0B,MAAMgD,cAAcE,MAAMH,IAChCzE,EAAMuC,WAAWmC,cAAcE,MAAMH,IACrCzE,EAAMyC,KAAKiC,cAAcE,MAAMH,IAE/BzE,EAAMwC,KAAKoC,MAAMH,KAEzB7B,KAAK4B,SAAS,CAAEJ,0CAIhB,OAAIxB,KAAKsB,MAAME,KAEPxD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC+D,EAAD,CAAM5B,YAAaL,KAAKoB,sBACxBpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACV6B,KAAKsB,MAAME,KAAKxE,IAAI,SAACI,EAAOqB,GAAR,OACjBT,EAAAC,EAAAC,cAACgE,EAAD,CAAM9E,MAAOA,EAAOqB,IAAKA,QAMtCT,EAAAC,EAAAC,cAAA,kCAhDoB0C,aCLnCuB,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAAWC,SAASC,eAAe","file":"static/js/main.21c1cfef.chunk.js","sourcesContent":["const toJSON = records => {\n    const fSplit = r => r.split('\\t')\n    const recordsArray = records.map(fSplit)\n    const columns = recordsArray[0]\n    const papers = recordsArray.slice(1)\n    const papersJson = papers.map(paper => {\n        const dict = {}\n        for (let i = 0; i < columns.length; i++) {\n            dict[columns[i].trim()] = paper[i] || ''\n        }\n        return dict\n    })\n    return papersJson\n}\n\nconst parseTSV = response => {\n    let records = response.split('\\n')\n    records = records.map(record => record.replace(/\\n$/, ''))\n    const papersJson = toJSON(records)\n    return papersJson\n}\n\nexport default parseTSV\n","import React from 'react'\n\ntype Props = {\n    text: string,\n    badgeClass: string\n}\n\nconst PaperBadge = ({ text, badgeClass }: Props) => (\n    <div>\n        <span className={badgeClass}>{text}</span>\n    </div>\n)\n\nexport default PaperBadge\n","import React from 'react'\nimport PaperBadge from '../atoms/paperBadge'\nimport Popup from 'reactjs-popup'\n\ntype Props = {\n    paper: any,\n    idx: number\n}\n\nfunction createKey(paper_json) {\n    let raw_authors = paper_json['authors'].split(',')\n    if (raw_authors.length > 0) {\n        let first_author = raw_authors[0]\n        first_author = first_author.split(' ')\n        first_author = first_author.slice(-1)[0]\n        return first_author + paper_json['year']\n    }\n}\n\nfunction createPopup(paper_json) {\n    let bibtex_item = ''\n\n    if (paper_json['conference'].startsWith('j:')) {\n        let journal_name = paper_json['conference'].slice(2)\n        bibtex_item += '@article{' + createKey(paper_json) + ',<br>'\n        bibtex_item += '&nbsp;&nbsp;journal={' + journal_name + '},<br>'\n    } else {\n        createKey(paper_json)\n        bibtex_item += '@inproceedings{' + createKey(paper_json) + ',<br>'\n        bibtex_item +=\n            '&nbsp;&nbsp;booktitle={Proceedings of ' +\n            paper_json['conference'] +\n            '},<br>'\n    }\n\n    let authors = paper_json['authors'].replace(/, /g, ' and ')\n    bibtex_item += '&nbsp;&nbsp;author=\"' + authors + '\",<br>'\n    bibtex_item += '&nbsp;&nbsp;title={' + paper_json['title'] + '},<br>'\n    bibtex_item += '}'\n\n    let ret = { __html: bibtex_item }\n\n    return (\n        <Popup\n            trigger={<button class=\"btn btn-info\"> BibTex export </button>}\n            modal\n        >\n            <div dangerouslySetInnerHTML={ret} />\n        </Popup>\n    )\n}\n\nconst Card = ({ paper, idx }: Props) => (\n    <div className=\"card border-info mb-3\" key={idx}>\n        <div className=\"card-header text-muted\">Added: {paper.date}</div>\n        <div className=\"card-body\">\n            <h5 className=\"card-title\">\n                <a href={paper.link}>{paper.title}</a>\n            </h5>\n            <div className=\"headerComponent\">\n                {createPopup(paper)}\n                <PaperBadge\n                    text={paper.conference}\n                    badgeClass=\"badge badge-info\"\n                />\n                <PaperBadge\n                    text={paper.year}\n                    badgeClass=\"badge badge-success\"\n                />\n            </div>\n            <p className=\"card-text\">{paper.note}</p>\n        </div>\n    </div>\n)\n\nexport default Card\n","import React, { Component } from 'react'\n\nexport default class Form extends Component {\n    filterVal() {\n        const val = this.refs.myinput.value\n        this.props.onFilterVal(val)\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"form-group\">\n                    <input\n                        type=\"text\"\n                        ref=\"myinput\"\n                        className=\"form-control\"\n                        placeholder=\"Named Entity Recognition\"\n                        onKeyUp={this.filterVal.bind(this)}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport parseTSV from '../../utils/parse'\nimport Card from '../molecules/card'\nimport Form from '../molecules/form'\n\nconst URL =\n    'https://docs.google.com/spreadsheets/d/e/' +\n    '2PACX-1vQ3TV9KzYftbwV0gtWRZpTjMz9PSGHDU25705dbazQ_jmCYasQeL1YKP3jfZFY2kZ7PMWCYAVjLVG8h/' +\n    'pub?gid=0&single=true&output=tsv'\n\nexport default class Paper extends Component {\n    constructor(props) {\n        super(props)\n        this.handleFilterTextVal = this.handleFilterTextVal.bind(this)\n        this.state = {\n            data: null,\n            filt: null\n        }\n    }\n\n    componentDidMount() {\n        fetch(URL)\n            .then(response => response.text())\n            .then(data => parseTSV(data))\n            .then(filt =>\n                this.setState({\n                    data: filt,\n                    filt\n                })\n            )\n    }\n\n    handleFilterTextVal(query) {\n        query = query.toLowerCase()\n        const filt = this.state.data.filter(\n            paper =>\n                paper.title.toLowerCase().match(query) ||\n                paper.conference.toLowerCase().match(query) ||\n                paper.note.toLowerCase().match(query) ||\n                // paper['link'].toLowerCase().match(query) ||\n                paper.year.match(query)\n        )\n        this.setState({ filt })\n    }\n\n    render() {\n        if (this.state.filt) {\n            return (\n                <div>\n                    <Form onFilterVal={this.handleFilterTextVal} />\n                    <div className=\"card-columns\">\n                        {this.state.filt.map((paper, idx) => (\n                            <Card paper={paper} idx={idx} />\n                        ))}\n                    </div>\n                </div>\n            )\n        }\n        return <div> Loading... </div>\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Paper from './components/templates/paper';\n\nReactDOM.render(<Paper />, document.getElementById('root'));\n"],"sourceRoot":""}